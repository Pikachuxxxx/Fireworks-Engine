//  Copyright 2021 Google LLC
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#ifndef FALKEN_SDK_CORE_PUBLIC_INCLUDE_FALKEN_ACTIONS_H_
#define FALKEN_SDK_CORE_PUBLIC_INCLUDE_FALKEN_ACTIONS_H_

#include "falken/allocator.h"
#include "falken/attribute.h"
#include "falken/config.h"

namespace falken {

/// Set of action data that can be generated by a brain or by a human.
class FALKEN_EXPORT ActionsBase : public AttributeContainer {
  friend class ActionProtoConverter;

 public:
  /// Constructor that passes the supported actions list to the
  /// AttributeContainer constructor.
  ActionsBase();

  /// Copy constructor.
  ActionsBase(const ActionsBase& other);

  /// Move constructor.
  ActionsBase(ActionsBase&& other);

  /// Enum to indicate valid action sources.
  enum Source {
    /// Invalid source, should never be set.
    kSourceInvalid = 0,
    /// Action should be ignored.
    kSourceNone,
    /// Action is was generated by a human demonstration, Falken should learn
    /// from this action.
    kSourceHumanDemonstration,
    /// Action was generated by Falken.
    kSourceBrainAction,
  };

  /// Set the action source.
  ///
  /// @param source Source of the action, see @ref Source for more information.
  void set_source(Source source);

  /// Get the action source.
  ///
  /// @return Source of the action.
  Source source() const;

  FALKEN_DEFINE_NEW_DELETE

 private:
  Source source_;
};

}  // namespace falken

#endif  // RESEARCH_KERNEL_FALKEN_SDK_CORE_PUBLIC_INCLUDE_FALKEN_ACTIONS_H_
